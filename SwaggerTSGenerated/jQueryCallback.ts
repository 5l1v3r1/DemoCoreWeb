/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as jQuery from 'jquery';

namespace MyNS {

export class EntitiesClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPerson(id: number, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/getPerson/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processGetPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processGetPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processGetPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processGetPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processGetPerson(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createPerson(body: Person | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/createPerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processCreatePersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCreatePersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processCreatePersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCreatePerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCreatePerson(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updatePerson(body: Person | undefined, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/updatePerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processUpdatePersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUpdatePersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processUpdatePersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUpdatePerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUpdatePerson(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @param id (optional) 
     * @param relationship (optional) 
     * @param body (optional) 
     * @return Success
     */
    link(id: number | undefined, relationship: string | undefined, body: Person | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/link?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (relationship === null)
            throw new Error("The parameter 'relationship' cannot be null.");
        else if (relationship !== undefined)
            url_ += "relationship=" + encodeURIComponent("" + relationship) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processLinkWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processLinkWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processLinkWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processLink(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processLink(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    entities(id: number, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processEntitiesWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processEntitiesWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processEntitiesWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processEntities(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processEntities(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    company(id: number, onSuccess?: (result: Company) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/Company/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processCompanyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCompanyWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processCompanyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCompany(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCompany(xhr: any): Company | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Company.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mims(body: MimsPackage | undefined, onSuccess?: (result: StringMimsResult) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/Mims";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processMimsWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processMimsWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processMimsWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processMims(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processMims(xhr: any): StringMimsResult | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringMimsResult.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    myGeneric(body: StringDecimalDoubleMyGeneric | undefined, onSuccess?: (result: StringDecimalDoubleMyGeneric) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/MyGeneric";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processMyGenericWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processMyGenericWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processMyGenericWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processMyGeneric(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processMyGeneric(xhr: any): StringDecimalDoubleMyGeneric | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringDecimalDoubleMyGeneric.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    myGenericPerson(body: StringDecimalPersonMyGeneric | undefined, onSuccess?: (result: StringDecimalPersonMyGeneric) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Entities/MyGenericPerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processMyGenericPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processMyGenericPersonWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processMyGenericPersonWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processMyGenericPerson(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processMyGenericPerson(xhr: any): StringDecimalPersonMyGeneric | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringDecimalPersonMyGeneric.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class HeroesClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    heroesGet(onSuccess?: (result: Hero[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHeroesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHeroesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHeroesGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHeroesGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHeroesGet(xhr: any): Hero[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Hero.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    heroesPost(body: string | undefined, onSuccess?: (result: Hero) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHeroesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHeroesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHeroesPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHeroesPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHeroesPost(xhr: any): Hero | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Hero.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    heroesPut(body: Hero | undefined, onSuccess?: (result: Hero) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHeroesPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHeroesPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHeroesPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHeroesPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHeroesPut(xhr: any): Hero | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Hero.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    heroesGet(id: number, onSuccess?: (result: Hero) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHeroesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHeroesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHeroesGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHeroesGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHeroesGet(xhr: any): Hero | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Hero.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    heroesDelete(id: number, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHeroesDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHeroesDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHeroesDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHeroesDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHeroesDelete(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    q(name: string | undefined, onSuccess?: (result: Hero) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes/q?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processQWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processQWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processQWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processQ(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processQ(xhr: any): Hero | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Hero.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    search(name: string, onSuccess?: (result: Hero[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Heroes/search/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processSearchWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processSearchWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearch(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearch(xhr: any): Hero[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Hero.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class HomeClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    home(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Home";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processHomeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processHomeWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processHomeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processHome(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processHome(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class SpecialTypesClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    anonymousDynamic(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SpecialTypes/AnonymousDynamic";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processAnonymousDynamicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAnonymousDynamicWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processAnonymousDynamicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAnonymousDynamic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAnonymousDynamic(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    anonymousObjectGet(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SpecialTypes/AnonymousObject";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processAnonymousObjectGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAnonymousObjectGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processAnonymousObjectGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAnonymousObjectGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAnonymousObjectGet(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    anonymousObjectPost(body: any | undefined, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SpecialTypes/AnonymousObject";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processAnonymousObjectPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processAnonymousObjectPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processAnonymousObjectPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processAnonymousObjectPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processAnonymousObjectPost(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class SuperDemoClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    int(d: number, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/int/{d}";
        if (d === undefined || d === null)
            throw new Error("The parameter 'd' must be defined.");
        url_ = url_.replace("{d}", encodeURIComponent("" + d)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIntWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIntWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIntWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInt(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInt(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    decimalGet(d: number, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/decimal/{d}";
        if (d === undefined || d === null)
            throw new Error("The parameter 'd' must be defined.");
        url_ = url_.replace("{d}", encodeURIComponent("" + d)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDecimalGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDecimalGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDecimalGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDecimalGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDecimalGet(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nullableDatetime(hasValue: boolean, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NullableDatetime/{hasValue}";
        if (hasValue === undefined || hasValue === null)
            throw new Error("The parameter 'hasValue' must be defined.");
        url_ = url_.replace("{hasValue}", encodeURIComponent("" + hasValue)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNullableDatetimeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNullableDatetimeWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNullableDatetimeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNullableDatetime(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNullableDatetime(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nextYearGet(dt: Date, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NextYear/{dt}";
        if (dt === undefined || dt === null)
            throw new Error("The parameter 'dt' must be defined.");
        url_ = url_.replace("{dt}", encodeURIComponent(dt ? "" + dt.toJSON() : "null")); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNextYearGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNextYearGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNextYearGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNextYearGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNextYearGet(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nextHour(dt: Date, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NextHour/{dt}";
        if (dt === undefined || dt === null)
            throw new Error("The parameter 'dt' must be defined.");
        url_ = url_.replace("{dt}", encodeURIComponent(dt ? "" + dt.toJSON() : "null")); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNextHourWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNextHourWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNextHourWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNextHour(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNextHour(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    nextYearPost(body: Date | undefined, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NextYear";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNextYearPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNextYearPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNextYearPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNextYearPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNextYearPost(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    dateTimeOffsetGet(onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DateTimeOffset";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDateTimeOffsetGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDateTimeOffsetGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDateTimeOffsetGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDateTimeOffsetGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDateTimeOffsetGet(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    dateTimeOffsetPost(body: Date | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DateTimeOffset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDateTimeOffsetPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDateTimeOffsetPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDateTimeOffsetPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDateTimeOffsetPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDateTimeOffsetPost(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    dateTimeOffsetNullable(body: Date | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DateTimeOffsetNullable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDateTimeOffsetNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDateTimeOffsetNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDateTimeOffsetNullableWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDateTimeOffsetNullable(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDateTimeOffsetNullable(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nullableDecimal(hasValue: boolean, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NullableDecimal/{hasValue}";
        if (hasValue === undefined || hasValue === null)
            throw new Error("The parameter 'hasValue' must be defined.");
        url_ = url_.replace("{hasValue}", encodeURIComponent("" + hasValue)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNullableDecimalWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNullableDecimalWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNullableDecimalWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNullableDecimal(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNullableDecimal(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    floatZero(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/FloatZero";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processFloatZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processFloatZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processFloatZeroWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processFloatZero(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processFloatZero(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    doubleZero(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DoubleZero";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDoubleZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDoubleZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDoubleZeroWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDoubleZero(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDoubleZero(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    decimalZero(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DecimalZero";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDecimalZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDecimalZeroWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDecimalZeroWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDecimalZero(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDecimalZero(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nullString(onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NullString";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNullStringWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNullStringWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNullStringWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNullString(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNullString(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    emptyString(onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/EmptyString";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processEmptyStringWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processEmptyStringWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processEmptyStringWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processEmptyString(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processEmptyString(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    nullObject(onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NullObject";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNullObjectWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNullObjectWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNullObjectWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNullObject(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNullObject(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    textStream(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/TextStream";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTextStreamWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTextStreamWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTextStreamWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTextStream(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTextStream(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    byteArray(onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ByteArray";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processByteArrayWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processByteArrayWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processByteArrayWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processByteArray(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processByteArray(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    actionResultGet(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ActionResult";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processActionResultGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processActionResultGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processActionResultGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processActionResultGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processActionResultGet(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    actionResultPost(onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ActionResult";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processActionResultPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processActionResultPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processActionResultPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processActionResultPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processActionResultPost(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postActionResult2(body: string | undefined, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/PostActionResult2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPostActionResult2WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostActionResult2WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPostActionResult2WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostActionResult2(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostActionResult2(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postActionResult3(body: Person | undefined, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/PostActionResult3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPostActionResult3WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostActionResult3WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPostActionResult3WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostActionResult3(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostActionResult3(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    actionStringResult(onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ActionStringResult";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processActionStringResultWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processActionStringResultWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processActionStringResultWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processActionStringResult(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processActionStringResult(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    byte(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/byte";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processByteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processByteWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processByteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processByte(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processByte(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    sbyte(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/sbyte";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processSbyteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSbyteWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processSbyteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSbyte(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSbyte(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    short(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/short";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processShortWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processShortWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processShortWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processShort(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processShort(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    ushort(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ushort";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processUshortWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUshortWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processUshortWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUshort(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUshort(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    uint(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/uint";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processUintWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUintWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processUintWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUint(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUint(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    ulong(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ulong";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processUlongWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processUlongWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processUlongWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processUlong(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processUlong(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    doulbe(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/doulbe";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDoulbeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDoulbeWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDoulbeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDoulbe(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDoulbe(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    decimalGet(onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/decimal";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDecimalGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDecimalGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDecimalGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDecimalGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDecimalGet(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    char(onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/char";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processCharWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCharWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processCharWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processChar(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processChar(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    bool(onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/bool";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processBoolWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processBoolWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processBoolWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processBool(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processBool(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    int2dGet(onSuccess?: (result: any[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/int2d";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processInt2dGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processInt2dGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processInt2dGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInt2dGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInt2dGet(xhr: any): any[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    int2dPost(body: any[] | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/int2d";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processInt2dPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processInt2dPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processInt2dPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInt2dPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInt2dPost(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    int2dJagged(onSuccess?: (result: number[][]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/int2dJagged";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processInt2dJaggedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processInt2dJaggedWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processInt2dJaggedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInt2dJagged(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInt2dJagged(xhr: any): number[][] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    int2djagged(body: number[][] | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/int2djagged";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processInt2djaggedWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processInt2djaggedWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processInt2djaggedWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processInt2djagged(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processInt2djagged(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    intArrayPost(body: number[] | undefined, onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/intArray";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIntArrayPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIntArrayPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIntArrayPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIntArrayPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIntArrayPost(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    intArrayGet(onSuccess?: (result: number[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/intArray";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIntArrayGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIntArrayGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIntArrayGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIntArrayGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIntArrayGet(xhr: any): number[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    stringStringDic(onSuccess?: (result: { [key: string]: string; }) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/StringStringDic";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processStringStringDicWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStringStringDicWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processStringStringDicWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStringStringDic(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStringStringDic(xhr: any): { [key: string]: string; } | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key];
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    stringPersonDicGet(onSuccess?: (result: { [key: string]: Person; }) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/StringPersonDic";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processStringPersonDicGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStringPersonDicGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processStringPersonDicGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStringPersonDicGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStringPersonDicGet(xhr: any): { [key: string]: Person; } | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key] ? Person.fromJS(resultData200[key]) : new Person();
                }
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    stringPersonDicPost(body: { [key: string]: Person; } | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/StringPersonDic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processStringPersonDicPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStringPersonDicPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processStringPersonDicPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStringPersonDicPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStringPersonDicPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    keyValuePair(onSuccess?: (result: StringPersonKeyValuePair) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/KeyValuePair";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processKeyValuePairWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processKeyValuePairWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processKeyValuePairWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processKeyValuePair(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processKeyValuePair(xhr: any): StringPersonKeyValuePair | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringPersonKeyValuePair.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    iCollectionGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ICollection";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processICollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processICollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processICollectionGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processICollectionGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processICollectionGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    iCollectionPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/ICollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processICollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processICollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processICollectionPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processICollectionPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processICollectionPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    iListGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IList";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIListGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIListGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIListGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    iListPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIListPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIListPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIListPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    iReadOnlyListGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IReadOnlyList";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIReadOnlyListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIReadOnlyListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIReadOnlyListGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIReadOnlyListGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIReadOnlyListGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    iReadOnlyListPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IReadOnlyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIReadOnlyListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIReadOnlyListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIReadOnlyListPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIReadOnlyListPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIReadOnlyListPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    iReadOnlyCollectionGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IReadOnlyCollection";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIReadOnlyCollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIReadOnlyCollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIReadOnlyCollectionGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIReadOnlyCollectionGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIReadOnlyCollectionGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    iReadOnlyCollectionPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/IReadOnlyCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processIReadOnlyCollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processIReadOnlyCollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processIReadOnlyCollectionPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processIReadOnlyCollectionPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processIReadOnlyCollectionPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    listGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/List";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processListGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processListGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processListGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processListGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    listPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processListPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processListPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processListPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processListPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    collectionGet(onSuccess?: (result: Person[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/Collection";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processCollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCollectionGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processCollectionGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCollectionGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCollectionGet(xhr: any): Person[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    collectionPost(body: Person[] | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/Collection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processCollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processCollectionPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processCollectionPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processCollectionPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processCollectionPost(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postEmpty(i: number, body: string | undefined, onSuccess?: (result: StringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/PostEmpty/{i}";
        if (i === undefined || i === null)
            throw new Error("The parameter 'i' must be defined.");
        url_ = url_.replace("{i}", encodeURIComponent("" + i)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPostEmptyWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPostEmptyWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPostEmptyWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPostEmpty(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPostEmpty(xhr: any): StringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param location (optional) 
     * @param dd (optional) 
     * @param de (optional) 
     * @return Success
     */
    doubleNullable(location: string | undefined, dd: number | undefined, de: number | undefined, onSuccess?: (result: StringDoubleNullableDecimalNullableTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DoubleNullable?";
        if (location === null)
            throw new Error("The parameter 'location' cannot be null.");
        else if (location !== undefined)
            url_ += "location=" + encodeURIComponent("" + location) + "&"; 
        if (dd === null)
            throw new Error("The parameter 'dd' cannot be null.");
        else if (dd !== undefined)
            url_ += "dd=" + encodeURIComponent("" + dd) + "&"; 
        if (de === null)
            throw new Error("The parameter 'de' cannot be null.");
        else if (de !== undefined)
            url_ += "de=" + encodeURIComponent("" + de) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDoubleNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDoubleNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDoubleNullableWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDoubleNullable(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDoubleNullable(xhr: any): StringDoubleNullableDecimalNullableTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringDoubleNullableDecimalNullableTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param dd (optional) 
     * @param de (optional) 
     * @return Success
     */
    doubleNullable2(dd: number | undefined, de: number | undefined, onSuccess?: (result: DoubleNullableDecimalNullableTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/DoubleNullable2?";
        if (dd === null)
            throw new Error("The parameter 'dd' cannot be null.");
        else if (dd !== undefined)
            url_ += "dd=" + encodeURIComponent("" + dd) + "&"; 
        if (de === null)
            throw new Error("The parameter 'de' cannot be null.");
        else if (de !== undefined)
            url_ += "de=" + encodeURIComponent("" + de) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processDoubleNullable2WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processDoubleNullable2WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processDoubleNullable2WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processDoubleNullable2(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processDoubleNullable2(xhr: any): DoubleNullableDecimalNullableTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DoubleNullableDecimalNullableTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param n (optional) 
     * @param dt (optional) 
     * @return Success
     */
    nextYearNullable(n: number | undefined, dt: Date | undefined, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NextYearNullable?";
        if (n === null)
            throw new Error("The parameter 'n' cannot be null.");
        else if (n !== undefined)
            url_ += "n=" + encodeURIComponent("" + n) + "&"; 
        if (dt === null)
            throw new Error("The parameter 'dt' cannot be null.");
        else if (dt !== undefined)
            url_ += "dt=" + encodeURIComponent(dt ? "" + dt.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNextYearNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNextYearNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNextYearNullableWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNextYearNullable(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNextYearNullable(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param n (optional) 
     * @param dt (optional) 
     * @return Success
     */
    nextHourNullable(n: number | undefined, dt: Date | undefined, onSuccess?: (result: Date) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/NextHourNullable?";
        if (n === null)
            throw new Error("The parameter 'n' cannot be null.");
        else if (n !== undefined)
            url_ += "n=" + encodeURIComponent("" + n) + "&"; 
        if (dt === null)
            throw new Error("The parameter 'dt' cannot be null.");
        else if (dt !== undefined)
            url_ += "dt=" + encodeURIComponent(dt ? "" + dt.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processNextHourNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processNextHourNullableWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processNextHourNullableWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processNextHourNullable(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processNextHourNullable(xhr: any): Date | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? new Date(resultData200.toString()) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @return Success
     */
    searchDateRange(startDate: Date | undefined, endDate: Date | undefined, onSuccess?: (result: DateTimeNullableDateTimeNullableTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/SuperDemo/SearchDateRange?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processSearchDateRangeWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processSearchDateRangeWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processSearchDateRangeWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processSearchDateRange(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processSearchDateRange(xhr: any): DateTimeNullableDateTimeNullableTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DateTimeNullableDateTimeNullableTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class TupleClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    personCompany1(body: PersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PersonCompany1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPersonCompany1WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPersonCompany1WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPersonCompany1WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPersonCompany1(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPersonCompany1(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany2(body: PersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany2WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany2WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany2WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany2(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany2(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany3(body: PersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany3WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany3WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany3WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany3(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany3(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany4Post(body: PersonPersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany4";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany4PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany4PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany4PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany4Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany4Post(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    peopleCompany4Get(onSuccess?: (result: PersonPersonPersonCompanyTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany4";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany4GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany4GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany4GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany4Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany4Get(xhr: any): PersonPersonPersonCompanyTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonPersonPersonCompanyTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany5Post(body: PersonPersonPersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany5";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany5PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany5PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany5PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany5Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany5Post(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    peopleCompany5Get(onSuccess?: (result: PersonPersonPersonPersonCompanyTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany5";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany5GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany5GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany5GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany5Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany5Get(xhr: any): PersonPersonPersonPersonCompanyTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PersonPersonPersonPersonCompanyTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany6(body: PersonPersonPersonPersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany6";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany6WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany6WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany6WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany6(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany6(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany7(body: PersonPersonPersonPersonPersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany7";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany7WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany7WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany7WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany7(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany7(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    peopleCompany8(body: PersonPersonPersonPersonPersonPersonPersonCompanyTuple | undefined, onSuccess?: (result: Person) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/PeopleCompany8";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processPeopleCompany8WithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processPeopleCompany8WithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processPeopleCompany8WithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processPeopleCompany8(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processPeopleCompany8(xhr: any): Person | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple1Get(onSuccess?: (result: Int32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple1";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple1GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple1GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple1GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple1Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple1Get(xhr: any): Int32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple1Post(body: Int32Tuple | undefined, onSuccess?: (result: number) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple1PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple1PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple1PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple1Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple1Post(xhr: any): number | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple2Get(onSuccess?: (result: StringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple2";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple2GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple2GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple2GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple2Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple2Get(xhr: any): StringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple2Post(body: StringInt32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple2PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple2PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple2PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple2Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple2Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple3Get(onSuccess?: (result: StringStringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple3";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple3GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple3GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple3GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple3Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple3Get(xhr: any): StringStringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple3Post(body: StringStringInt32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple3PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple3PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple3PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple3Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple3Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple4Get(onSuccess?: (result: StringStringStringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple4";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple4GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple4GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple4GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple4Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple4Get(xhr: any): StringStringStringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringStringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple4Post(body: StringStringStringInt32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple4";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple4PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple4PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple4PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple4Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple4Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple5Get(onSuccess?: (result: StringStringStringStringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple5";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple5GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple5GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple5GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple5Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple5Get(xhr: any): StringStringStringStringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringStringStringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple5Post(body: StringStringStringStringInt32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple5";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple5PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple5PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple5PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple5Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple5Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple6Get(onSuccess?: (result: StringStringStringStringStringInt32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple6";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple6GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple6GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple6GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple6Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple6Get(xhr: any): StringStringStringStringStringInt32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringStringStringStringInt32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple6Post(body: StringStringStringStringStringInt32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple6";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple6PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple6PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple6PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple6Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple6Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple7Get(onSuccess?: (result: StringStringStringStringStringInt64Int32Tuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple7";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple7GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple7GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple7GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple7Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple7Get(xhr: any): StringStringStringStringStringInt64Int32Tuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringStringStringStringInt64Int32Tuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple7Post(body: StringStringStringStringStringInt64Int32Tuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple7";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple7PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple7PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple7PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple7Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple7Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    tuple8Get(onSuccess?: (result: StringStringStringStringStringStringInt32StringStringStringTupleTuple) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple8";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple8GetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple8GetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple8GetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple8Get(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple8Get(xhr: any): StringStringStringStringStringStringInt32StringStringStringTupleTuple | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringStringStringStringStringStringInt32StringStringStringTupleTuple.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tuple8Post(body: StringStringStringStringStringStringStringStringStringStringTupleTuple | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Tuple/Tuple8";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processTuple8PostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTuple8PostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processTuple8PostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTuple8Post(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTuple8Post(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export class ValuesClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    valuesGet(onSuccess?: (result: string[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processValuesGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValuesGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValuesGet(xhr: any): string[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    valuesPost(body: string | undefined, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processValuesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValuesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processValuesPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValuesPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValuesPost(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @return Success
     */
    valuesGet(id: number, onSuccess?: (result: string) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processValuesGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValuesGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValuesGet(xhr: any): string | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    valuesPut(id: number, body: string | undefined, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json", 
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processValuesPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValuesPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processValuesPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValuesPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValuesPut(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @return Success
     */
    valuesDelete(id: number, onSuccess?: () => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            dataType: "text",
            headers: {
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processValuesDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processValuesDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processValuesDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processValuesDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processValuesDelete(xhr: any): void {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class WeatherForecastClient {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    weatherForecast(onSuccess?: (result: WeatherForecast[]) => void, onFail?: (exception: string, reason: string) => void): JQueryXHR {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "text/plain"
            }
        }); 
        
        jqXhr.done((_data, _textStatus, xhr) => {
            this.processWeatherForecastWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processWeatherForecastWithCallbacks(url_, xhr, onSuccess, onFail);
        });

        return jqXhr;
    }

    private processWeatherForecastWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processWeatherForecast(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processWeatherForecast(xhr: any): WeatherForecast[] | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }
}

export enum PhoneType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class PhoneNumber implements IPhoneNumber {
    id?: string;
    fullNumber?: string | undefined;
    phoneType?: PhoneType;
    entityId?: string;

    constructor(data?: IPhoneNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullNumber = _data["fullNumber"];
            this.phoneType = _data["phoneType"];
            this.entityId = _data["entityId"];
        }
    }

    static fromJS(data: any): PhoneNumber {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullNumber"] = this.fullNumber;
        data["phoneType"] = this.phoneType;
        data["entityId"] = this.entityId;
        return data; 
    }
}

export interface IPhoneNumber {
    id?: string;
    fullNumber?: string | undefined;
    phoneType?: PhoneType;
    entityId?: string;
}

export class Entity implements IEntity {
    id?: string;
    name!: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;

    constructor(data?: IEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.web = _data["web"];
        }
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        let result = new Entity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["web"] = this.web;
        return data; 
    }
}

export interface IEntity {
    id?: string;
    name: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;
}

export enum AddressType {
    _0 = 0,
    _1 = 1,
}

export class Address implements IAddress {
    id?: string;
    entity?: Entity | undefined;
    entityId?: string;
    street1?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    type?: AddressType;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.entity = _data["entity"] ? Entity.fromJS(_data["entity"]) : <any>undefined;
            this.entityId = _data["entityId"];
            this.street1 = _data["street1"];
            this.street2 = _data["street2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entity"] = this.entity ? this.entity.toJSON() : <any>undefined;
        data["entityId"] = this.entityId;
        data["street1"] = this.street1;
        data["street2"] = this.street2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["type"] = this.type;
        return data; 
    }
}

export interface IAddress {
    id?: string;
    entity?: Entity | undefined;
    entityId?: string;
    street1?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    type?: AddressType;
}

export class Person implements IPerson {
    surname?: string | undefined;
    givenName?: string | undefined;
    dob?: Date | undefined;
    id?: string;
    name!: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.surname = _data["surname"];
            this.givenName = _data["givenName"];
            this.dob = _data["dob"] ? new Date(_data["dob"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.web = _data["web"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname;
        data["givenName"] = this.givenName;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["web"] = this.web;
        return data; 
    }
}

export interface IPerson {
    surname?: string | undefined;
    givenName?: string | undefined;
    dob?: Date | undefined;
    id?: string;
    name: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;
}

export class Company implements ICompany {
    businessNumber?: string | undefined;
    businessNumberType?: string | undefined;
    textMatrix?: string[][] | undefined;
    id?: string;
    name!: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessNumber = _data["businessNumber"];
            this.businessNumberType = _data["businessNumberType"];
            if (Array.isArray(_data["textMatrix"])) {
                this.textMatrix = [] as any;
                for (let item of _data["textMatrix"])
                    this.textMatrix!.push(item);
            }
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(Address.fromJS(item));
            }
            if (Array.isArray(_data["phoneNumbers"])) {
                this.phoneNumbers = [] as any;
                for (let item of _data["phoneNumbers"])
                    this.phoneNumbers!.push(PhoneNumber.fromJS(item));
            }
            this.web = _data["web"];
        }
    }

    static fromJS(data: any): Company {
        data = typeof data === 'object' ? data : {};
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessNumber"] = this.businessNumber;
        data["businessNumberType"] = this.businessNumberType;
        if (Array.isArray(this.textMatrix)) {
            data["textMatrix"] = [];
            for (let item of this.textMatrix)
                data["textMatrix"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.phoneNumbers)) {
            data["phoneNumbers"] = [];
            for (let item of this.phoneNumbers)
                data["phoneNumbers"].push(item.toJSON());
        }
        data["web"] = this.web;
        return data; 
    }
}

export interface ICompany {
    businessNumber?: string | undefined;
    businessNumberType?: string | undefined;
    textMatrix?: string[][] | undefined;
    id?: string;
    name: string;
    addresses?: Address[] | undefined;
    phoneNumbers?: PhoneNumber[] | undefined;
    web?: string | undefined;
}

export class DecimalMimsResult implements IDecimalMimsResult {
    result?: number;
    generatedAt?: Date;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IDecimalMimsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): DecimalMimsResult {
        data = typeof data === 'object' ? data : {};
        let result = new DecimalMimsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["success"] = this.success;
        data["message"] = this.message;
        return data; 
    }
}

export interface IDecimalMimsResult {
    result?: number;
    generatedAt?: Date;
    success?: boolean;
    message?: string | undefined;
}

export class MimsPackage implements IMimsPackage {
    result?: DecimalMimsResult | undefined;
    tag?: string | undefined;

    constructor(data?: IMimsPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? DecimalMimsResult.fromJS(_data["result"]) : <any>undefined;
            this.tag = _data["tag"];
        }
    }

    static fromJS(data: any): MimsPackage {
        data = typeof data === 'object' ? data : {};
        let result = new MimsPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["tag"] = this.tag;
        return data; 
    }
}

export interface IMimsPackage {
    result?: DecimalMimsResult | undefined;
    tag?: string | undefined;
}

export class StringMimsResult implements IStringMimsResult {
    result?: string | undefined;
    generatedAt?: Date;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IStringMimsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.generatedAt = _data["generatedAt"] ? new Date(_data["generatedAt"].toString()) : <any>undefined;
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): StringMimsResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringMimsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["generatedAt"] = this.generatedAt ? this.generatedAt.toISOString() : <any>undefined;
        data["success"] = this.success;
        data["message"] = this.message;
        return data; 
    }
}

export interface IStringMimsResult {
    result?: string | undefined;
    generatedAt?: Date;
    success?: boolean;
    message?: string | undefined;
}

export class StringDecimalDoubleMyGeneric implements IStringDecimalDoubleMyGeneric {
    myT?: string | undefined;
    myK?: number;
    myU?: number;
    status?: string | undefined;

    constructor(data?: IStringDecimalDoubleMyGeneric) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.myT = _data["myT"];
            this.myK = _data["myK"];
            this.myU = _data["myU"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): StringDecimalDoubleMyGeneric {
        data = typeof data === 'object' ? data : {};
        let result = new StringDecimalDoubleMyGeneric();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myT"] = this.myT;
        data["myK"] = this.myK;
        data["myU"] = this.myU;
        data["status"] = this.status;
        return data; 
    }
}

export interface IStringDecimalDoubleMyGeneric {
    myT?: string | undefined;
    myK?: number;
    myU?: number;
    status?: string | undefined;
}

export class StringDecimalPersonMyGeneric implements IStringDecimalPersonMyGeneric {
    myT?: string | undefined;
    myK?: number;
    myU?: Person | undefined;
    status?: string | undefined;

    constructor(data?: IStringDecimalPersonMyGeneric) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.myT = _data["myT"];
            this.myK = _data["myK"];
            this.myU = _data["myU"] ? Person.fromJS(_data["myU"]) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): StringDecimalPersonMyGeneric {
        data = typeof data === 'object' ? data : {};
        let result = new StringDecimalPersonMyGeneric();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myT"] = this.myT;
        data["myK"] = this.myK;
        data["myU"] = this.myU ? this.myU.toJSON() : <any>undefined;
        data["status"] = this.status;
        return data; 
    }
}

export interface IStringDecimalPersonMyGeneric {
    myT?: string | undefined;
    myK?: number;
    myU?: Person | undefined;
    status?: string | undefined;
}

export class Hero implements IHero {
    id?: number;
    name?: string | undefined;

    constructor(data?: IHero) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Hero {
        data = typeof data === 'object' ? data : {};
        let result = new Hero();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IHero {
    id?: number;
    name?: string | undefined;
}

export class StringPersonKeyValuePair implements IStringPersonKeyValuePair {
    readonly key?: string | undefined;
    readonly value?: Person | undefined;

    constructor(data?: IStringPersonKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).key = _data["key"];
            (<any>this).value = _data["value"] ? Person.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StringPersonKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new StringPersonKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStringPersonKeyValuePair {
    key?: string | undefined;
    value?: Person | undefined;
}

export class StringInt32Tuple implements IStringInt32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: number;

    constructor(data?: IStringInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
        }
    }

    static fromJS(data: any): StringInt32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringInt32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data; 
    }
}

export interface IStringInt32Tuple {
    item1?: string | undefined;
    item2?: number;
}

export class StringDoubleNullableDecimalNullableTuple implements IStringDoubleNullableDecimalNullableTuple {
    readonly item1?: string | undefined;
    readonly item2?: number | undefined;
    readonly item3?: number | undefined;

    constructor(data?: IStringDoubleNullableDecimalNullableTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
        }
    }

    static fromJS(data: any): StringDoubleNullableDecimalNullableTuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringDoubleNullableDecimalNullableTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        return data; 
    }
}

export interface IStringDoubleNullableDecimalNullableTuple {
    item1?: string | undefined;
    item2?: number | undefined;
    item3?: number | undefined;
}

export class DoubleNullableDecimalNullableTuple implements IDoubleNullableDecimalNullableTuple {
    readonly item1?: number | undefined;
    readonly item2?: number | undefined;

    constructor(data?: IDoubleNullableDecimalNullableTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
        }
    }

    static fromJS(data: any): DoubleNullableDecimalNullableTuple {
        data = typeof data === 'object' ? data : {};
        let result = new DoubleNullableDecimalNullableTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data; 
    }
}

export interface IDoubleNullableDecimalNullableTuple {
    item1?: number | undefined;
    item2?: number | undefined;
}

export class DateTimeNullableDateTimeNullableTuple implements IDateTimeNullableDateTimeNullableTuple {
    readonly item1?: Date | undefined;
    readonly item2?: Date | undefined;

    constructor(data?: IDateTimeNullableDateTimeNullableTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? new Date(_data["item1"].toString()) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? new Date(_data["item2"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DateTimeNullableDateTimeNullableTuple {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeNullableDateTimeNullableTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toISOString() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDateTimeNullableDateTimeNullableTuple {
    item1?: Date | undefined;
    item2?: Date | undefined;
}

export class PersonCompanyTuple implements IPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Company | undefined;

    constructor(data?: IPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Company.fromJS(_data["item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Company | undefined;
}

export class PersonPersonCompanyTuple implements IPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Company | undefined;

    constructor(data?: IPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Company.fromJS(_data["item3"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Company | undefined;
}

export class PersonPersonPersonCompanyTuple implements IPersonPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Person | undefined;
    readonly item4?: Company | undefined;

    constructor(data?: IPersonPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Person.fromJS(_data["item3"]) : <any>undefined;
            (<any>this).item4 = _data["item4"] ? Company.fromJS(_data["item4"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Person | undefined;
    item4?: Company | undefined;
}

export class PersonPersonPersonPersonCompanyTuple implements IPersonPersonPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Person | undefined;
    readonly item4?: Person | undefined;
    readonly item5?: Company | undefined;

    constructor(data?: IPersonPersonPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Person.fromJS(_data["item3"]) : <any>undefined;
            (<any>this).item4 = _data["item4"] ? Person.fromJS(_data["item4"]) : <any>undefined;
            (<any>this).item5 = _data["item5"] ? Company.fromJS(_data["item5"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonPersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonPersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        data["item5"] = this.item5 ? this.item5.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Person | undefined;
    item4?: Person | undefined;
    item5?: Company | undefined;
}

export class PersonPersonPersonPersonPersonCompanyTuple implements IPersonPersonPersonPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Person | undefined;
    readonly item4?: Person | undefined;
    readonly item5?: Person | undefined;
    readonly item6?: Company | undefined;

    constructor(data?: IPersonPersonPersonPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Person.fromJS(_data["item3"]) : <any>undefined;
            (<any>this).item4 = _data["item4"] ? Person.fromJS(_data["item4"]) : <any>undefined;
            (<any>this).item5 = _data["item5"] ? Person.fromJS(_data["item5"]) : <any>undefined;
            (<any>this).item6 = _data["item6"] ? Company.fromJS(_data["item6"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonPersonPersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonPersonPersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        data["item5"] = this.item5 ? this.item5.toJSON() : <any>undefined;
        data["item6"] = this.item6 ? this.item6.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonPersonPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Person | undefined;
    item4?: Person | undefined;
    item5?: Person | undefined;
    item6?: Company | undefined;
}

export class PersonPersonPersonPersonPersonPersonCompanyTuple implements IPersonPersonPersonPersonPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Person | undefined;
    readonly item4?: Person | undefined;
    readonly item5?: Person | undefined;
    readonly item6?: Person | undefined;
    readonly item7?: Company | undefined;

    constructor(data?: IPersonPersonPersonPersonPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Person.fromJS(_data["item3"]) : <any>undefined;
            (<any>this).item4 = _data["item4"] ? Person.fromJS(_data["item4"]) : <any>undefined;
            (<any>this).item5 = _data["item5"] ? Person.fromJS(_data["item5"]) : <any>undefined;
            (<any>this).item6 = _data["item6"] ? Person.fromJS(_data["item6"]) : <any>undefined;
            (<any>this).item7 = _data["item7"] ? Company.fromJS(_data["item7"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonPersonPersonPersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonPersonPersonPersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        data["item5"] = this.item5 ? this.item5.toJSON() : <any>undefined;
        data["item6"] = this.item6 ? this.item6.toJSON() : <any>undefined;
        data["item7"] = this.item7 ? this.item7.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonPersonPersonPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Person | undefined;
    item4?: Person | undefined;
    item5?: Person | undefined;
    item6?: Person | undefined;
    item7?: Company | undefined;
}

export class PersonPersonPersonPersonPersonPersonPersonCompanyTuple implements IPersonPersonPersonPersonPersonPersonPersonCompanyTuple {
    readonly item1?: Person | undefined;
    readonly item2?: Person | undefined;
    readonly item3?: Person | undefined;
    readonly item4?: Person | undefined;
    readonly item5?: Person | undefined;
    readonly item6?: Person | undefined;
    readonly item7?: Person | undefined;
    readonly rest?: Company | undefined;

    constructor(data?: IPersonPersonPersonPersonPersonPersonPersonCompanyTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"] ? Person.fromJS(_data["item1"]) : <any>undefined;
            (<any>this).item2 = _data["item2"] ? Person.fromJS(_data["item2"]) : <any>undefined;
            (<any>this).item3 = _data["item3"] ? Person.fromJS(_data["item3"]) : <any>undefined;
            (<any>this).item4 = _data["item4"] ? Person.fromJS(_data["item4"]) : <any>undefined;
            (<any>this).item5 = _data["item5"] ? Person.fromJS(_data["item5"]) : <any>undefined;
            (<any>this).item6 = _data["item6"] ? Person.fromJS(_data["item6"]) : <any>undefined;
            (<any>this).item7 = _data["item7"] ? Person.fromJS(_data["item7"]) : <any>undefined;
            (<any>this).rest = _data["rest"] ? Company.fromJS(_data["rest"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonPersonPersonPersonPersonPersonPersonCompanyTuple {
        data = typeof data === 'object' ? data : {};
        let result = new PersonPersonPersonPersonPersonPersonPersonCompanyTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        data["item5"] = this.item5 ? this.item5.toJSON() : <any>undefined;
        data["item6"] = this.item6 ? this.item6.toJSON() : <any>undefined;
        data["item7"] = this.item7 ? this.item7.toJSON() : <any>undefined;
        data["rest"] = this.rest ? this.rest.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPersonPersonPersonPersonPersonPersonPersonCompanyTuple {
    item1?: Person | undefined;
    item2?: Person | undefined;
    item3?: Person | undefined;
    item4?: Person | undefined;
    item5?: Person | undefined;
    item6?: Person | undefined;
    item7?: Person | undefined;
    rest?: Company | undefined;
}

export class Int32Tuple implements IInt32Tuple {
    readonly item1?: number;

    constructor(data?: IInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
        }
    }

    static fromJS(data: any): Int32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new Int32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        return data; 
    }
}

export interface IInt32Tuple {
    item1?: number;
}

export class StringStringInt32Tuple implements IStringStringInt32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: number;

    constructor(data?: IStringStringInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
        }
    }

    static fromJS(data: any): StringStringInt32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringInt32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        return data; 
    }
}

export interface IStringStringInt32Tuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: number;
}

export class StringStringStringInt32Tuple implements IStringStringStringInt32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: number;

    constructor(data?: IStringStringStringInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
        }
    }

    static fromJS(data: any): StringStringStringInt32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringInt32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        return data; 
    }
}

export interface IStringStringStringInt32Tuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: number;
}

export class StringStringStringStringInt32Tuple implements IStringStringStringStringInt32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: string | undefined;
    readonly item5?: number;

    constructor(data?: IStringStringStringStringInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
            (<any>this).item5 = _data["item5"];
        }
    }

    static fromJS(data: any): StringStringStringStringInt32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringStringInt32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        return data; 
    }
}

export interface IStringStringStringStringInt32Tuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: string | undefined;
    item5?: number;
}

export class StringStringStringStringStringInt32Tuple implements IStringStringStringStringStringInt32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: string | undefined;
    readonly item5?: string | undefined;
    readonly item6?: number;

    constructor(data?: IStringStringStringStringStringInt32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
            (<any>this).item5 = _data["item5"];
            (<any>this).item6 = _data["item6"];
        }
    }

    static fromJS(data: any): StringStringStringStringStringInt32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringStringStringInt32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        data["item6"] = this.item6;
        return data; 
    }
}

export interface IStringStringStringStringStringInt32Tuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: string | undefined;
    item5?: string | undefined;
    item6?: number;
}

export class StringStringStringStringStringInt64Int32Tuple implements IStringStringStringStringStringInt64Int32Tuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: string | undefined;
    readonly item5?: string | undefined;
    readonly item6?: number;
    readonly item7?: number;

    constructor(data?: IStringStringStringStringStringInt64Int32Tuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
            (<any>this).item5 = _data["item5"];
            (<any>this).item6 = _data["item6"];
            (<any>this).item7 = _data["item7"];
        }
    }

    static fromJS(data: any): StringStringStringStringStringInt64Int32Tuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringStringStringInt64Int32Tuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        data["item6"] = this.item6;
        data["item7"] = this.item7;
        return data; 
    }
}

export interface IStringStringStringStringStringInt64Int32Tuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: string | undefined;
    item5?: string | undefined;
    item6?: number;
    item7?: number;
}

export class StringStringStringTuple implements IStringStringStringTuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;

    constructor(data?: IStringStringStringTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
        }
    }

    static fromJS(data: any): StringStringStringTuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        return data; 
    }
}

export interface IStringStringStringTuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
}

export class StringStringStringStringStringStringInt32StringStringStringTupleTuple implements IStringStringStringStringStringStringInt32StringStringStringTupleTuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: string | undefined;
    readonly item5?: string | undefined;
    readonly item6?: string | undefined;
    readonly item7?: number;
    readonly rest?: StringStringStringTuple | undefined;

    constructor(data?: IStringStringStringStringStringStringInt32StringStringStringTupleTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
            (<any>this).item5 = _data["item5"];
            (<any>this).item6 = _data["item6"];
            (<any>this).item7 = _data["item7"];
            (<any>this).rest = _data["rest"] ? StringStringStringTuple.fromJS(_data["rest"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StringStringStringStringStringStringInt32StringStringStringTupleTuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringStringStringStringInt32StringStringStringTupleTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        data["item6"] = this.item6;
        data["item7"] = this.item7;
        data["rest"] = this.rest ? this.rest.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStringStringStringStringStringStringInt32StringStringStringTupleTuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: string | undefined;
    item5?: string | undefined;
    item6?: string | undefined;
    item7?: number;
    rest?: StringStringStringTuple | undefined;
}

export class StringStringStringStringStringStringStringStringStringStringTupleTuple implements IStringStringStringStringStringStringStringStringStringStringTupleTuple {
    readonly item1?: string | undefined;
    readonly item2?: string | undefined;
    readonly item3?: string | undefined;
    readonly item4?: string | undefined;
    readonly item5?: string | undefined;
    readonly item6?: string | undefined;
    readonly item7?: string | undefined;
    readonly rest?: StringStringStringTuple | undefined;

    constructor(data?: IStringStringStringStringStringStringStringStringStringStringTupleTuple) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).item1 = _data["item1"];
            (<any>this).item2 = _data["item2"];
            (<any>this).item3 = _data["item3"];
            (<any>this).item4 = _data["item4"];
            (<any>this).item5 = _data["item5"];
            (<any>this).item6 = _data["item6"];
            (<any>this).item7 = _data["item7"];
            (<any>this).rest = _data["rest"] ? StringStringStringTuple.fromJS(_data["rest"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StringStringStringStringStringStringStringStringStringStringTupleTuple {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringStringStringStringStringStringStringStringStringTupleTuple();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        data["item3"] = this.item3;
        data["item4"] = this.item4;
        data["item5"] = this.item5;
        data["item6"] = this.item6;
        data["item7"] = this.item7;
        data["rest"] = this.rest ? this.rest.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStringStringStringStringStringStringStringStringStringStringTupleTuple {
    item1?: string | undefined;
    item2?: string | undefined;
    item3?: string | undefined;
    item4?: string | undefined;
    item5?: string | undefined;
    item6?: string | undefined;
    item7?: string | undefined;
    rest?: StringStringStringTuple | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}